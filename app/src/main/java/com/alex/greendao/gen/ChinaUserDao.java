package com.alex.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.my_china.greendaobase.ChinaUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHINA_USER".
*/
public class ChinaUserDao extends AbstractDao<ChinaUser, Long> {

    public static final String TABLENAME = "CHINA_USER";

    /**
     * Properties of entity ChinaUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Username = new Property(1, String.class, "username", false, "USERNAME");
        public final static Property Password = new Property(2, String.class, "password", false, "PASSWORD");
        public final static Property Hand = new Property(3, String.class, "hand", false, "HAND");
        public final static Property Time = new Property(4, String.class, "time", false, "TIME");
        public final static Property Region = new Property(5, String.class, "region", false, "REGION");
        public final static Property Platform = new Property(6, String.class, "platform", false, "PLATFORM");
        public final static Property Goodfield = new Property(7, String.class, "goodfield", false, "GOODFIELD");
        public final static Property Autograph = new Property(8, String.class, "autograph", false, "AUTOGRAPH");
    };


    public ChinaUserDao(DaoConfig config) {
        super(config);
    }
    
    public ChinaUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHINA_USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USERNAME\" TEXT," + // 1: username
                "\"PASSWORD\" TEXT," + // 2: password
                "\"HAND\" TEXT," + // 3: hand
                "\"TIME\" TEXT," + // 4: time
                "\"REGION\" TEXT," + // 5: region
                "\"PLATFORM\" TEXT," + // 6: platform
                "\"GOODFIELD\" TEXT," + // 7: goodfield
                "\"AUTOGRAPH\" TEXT);"); // 8: autograph
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHINA_USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChinaUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String hand = entity.getHand();
        if (hand != null) {
            stmt.bindString(4, hand);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
 
        String region = entity.getRegion();
        if (region != null) {
            stmt.bindString(6, region);
        }
 
        String platform = entity.getPlatform();
        if (platform != null) {
            stmt.bindString(7, platform);
        }
 
        String goodfield = entity.getGoodfield();
        if (goodfield != null) {
            stmt.bindString(8, goodfield);
        }
 
        String autograph = entity.getAutograph();
        if (autograph != null) {
            stmt.bindString(9, autograph);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChinaUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String hand = entity.getHand();
        if (hand != null) {
            stmt.bindString(4, hand);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
 
        String region = entity.getRegion();
        if (region != null) {
            stmt.bindString(6, region);
        }
 
        String platform = entity.getPlatform();
        if (platform != null) {
            stmt.bindString(7, platform);
        }
 
        String goodfield = entity.getGoodfield();
        if (goodfield != null) {
            stmt.bindString(8, goodfield);
        }
 
        String autograph = entity.getAutograph();
        if (autograph != null) {
            stmt.bindString(9, autograph);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChinaUser readEntity(Cursor cursor, int offset) {
        ChinaUser entity = new ChinaUser( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // username
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // password
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // hand
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // region
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // platform
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // goodfield
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // autograph
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChinaUser entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUsername(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHand(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRegion(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPlatform(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGoodfield(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAutograph(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChinaUser entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChinaUser entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
